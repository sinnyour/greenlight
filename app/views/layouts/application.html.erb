<%
# BigBlueButton open source conferencing system - http://www.bigbluebutton.org/.
# Copyright (c) 2018 BigBlueButton Inc. and by respective authors (see below).
# This program is free software; you can redistribute it and/or modify it under the
# terms of the GNU Lesser General Public License as published by the Free Software
# Foundation; either version 3.0 of the License, or (at your option) any later
# version.
#
# BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
# You should have received a copy of the GNU Lesser General Public License along
# with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
%>

<!DOCTYPE html>
<html>
  <head>
    <% if Rails.configuration.google_analytics %>
      <!-- Global site tag (gtag.js) - Google Analytics -->
      <script async src="<%= google_analytics_url %>"></script>
      <script>
        window.dataLayer = window.dataLayer || [];
        function gtag(){dataLayer.push(arguments);}
        gtag('js', new Date());

        gtag('config', "<%= ENV["GOOGLE_ANALYTICS_TRACKING_ID"] %>");
      </script>
    <% end %>

    <title><%= t("bigbluebutton") %></title>
    <meta property="og:title" content="<%= t("bigbluebutton", locale: :en) %>" />
    <meta property="og:type" content="website" />
    <meta property="og:description" content="<%= t("landing.about", href: "Greenlight", locale: :en) %>" />
    <meta property="og:url" content="<%= request.base_url %>" />
    <meta property="og:image" content="<%= logo_image %>" />

    <meta name="viewport" content= "width=device-width, user-scalable=no">
    <%= csrf_meta_tags %>

    <!-- Start: Backfround shader . -->

    <script id="2d-vertex-shader" type="x-shader/x-vertex">

        attribute vec2 a_position;

        uniform float u_flipY;

        attribute vec2 a_texCoord;
        varying vec2 v_texCoord;

        void main() {
           gl_Position = vec4(a_position.x, u_flipY*a_position.y, 0, 1);
           v_texCoord = a_texCoord;
        }
    </script>

    <script id="2d-fragment-shader" type="x-shader/x-fragment">
        precision mediump float;

        //texture arrays
        //uniform sampler2D u_position;
        uniform sampler2D u_image;//pos, velocity, acceleration = r, g, b

        varying vec2 v_texCoord;
        uniform vec2 u_textureSize;

        uniform vec2 u_mouseCoord;
        uniform float u_mouseEnable;

        uniform float u_kSpring;
        uniform float u_dSpring;
        uniform float u_mass;
        uniform float u_dt;

        uniform float u_renderFlag;

        void main() {

            vec2 onePixel = vec2(1.0, 1.0)/u_textureSize;

            vec4 currentState = texture2D(u_image, v_texCoord);

            if (u_renderFlag == 1.0){
                float position = currentState.r/20.0;
                position += 0.5;
                if (position > 1.0) position = 1.0;
                if (position < 0.0) position = 0.0;

                if (position < 0.5){
                    position *= 2.0;
                    //position = 0 -> blue
                    //position = 1 -> magenta
                    gl_FragColor = vec4((25.0*position)/20.0,(109.0*(1.0-position))/140.0,(10.0-54.0*position)/19.0,1.0);
                } else {
                    position -= 0.5;
                    position *= 2.0;
                    //position = 0 -> magenta
                    //position = 1 -> white
                    gl_FragColor = vec4((5.0-(10.0*position))/250.0,(223.0*position)/25.0,(106.0+(67.0*position))/2.0,1.0);
                }

                return;
            }

            float fTotal = 0.0;

            if (u_mouseEnable == 1.0){
                vec2 pxDistFromMouse = (v_texCoord - u_mouseCoord)*(v_texCoord - u_mouseCoord)/onePixel;
                float tol = 0.005;
                if (pxDistFromMouse.x < tol && pxDistFromMouse.y < tol){
                    fTotal -= 20.0;//upward force from mouse
                }
            }


            for (int i=-1;i<=1;i+=2){
                for (int j=-1;j<=1;j+=2){
                    if (i == 0 && j == 0) continue;
                    vec2 neighborCoord = v_texCoord + vec2(onePixel.x*float(i), onePixel.y*float(j));

                    vec4 neighborState;
                    if (neighborCoord.x < 0.0 || neighborCoord.y < 0.0 || neighborCoord.x >= 1.0 || neighborCoord.y >= 1.0){
                        neighborState = vec4(0.0,0.0,0.0,1.0);
                    } else {
                        neighborState = texture2D(u_image, neighborCoord);
                    }

                    float deltaP =  neighborState.r - currentState.r;
                    float deltaV = neighborState.g - currentState.g;

                    fTotal += u_kSpring*deltaP + u_dSpring*deltaV;
                }
            }

            float acceleration = fTotal/u_mass;
            float velocity = acceleration*u_dt + currentState.g;
            float position = velocity*u_dt + currentState.r;

            gl_FragColor = vec4(position,velocity,acceleration,1);
        }
    </script>

    <!-- END: Backfround shader . -->


    <!-- Global javascript variables and helpers. -->
    <script type="text/javascript">
      window.GreenLight = {};
      window.GreenLight.WEBSOCKET_HOST = "<%= ENV['WEBSOCKET_HOST'] %>"
      window.GreenLight.RELATIVE_ROOT = "<%= relative_root %>"
    </script>

    <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    <%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %>

    <!-- Primary color styling -->
    <%= stylesheet_link_tag themes_primary_path %>

    <script type="text/javascript">
      // Include the correct translated strings for Javascript
      window.I18n = <%= current_translations.to_json.html_safe %>
      window.I18nFallback = <%= fallback_translations.to_json.html_safe %>
    </script>
  </head>

  <body class="app-background" data-controller="<%= params[:controller] %>" data-action="<%= params[:action] %>" data-relative-root="<%= Rails.configuration.relative_url_root || "/" %>">
    <%= render "shared/header" %>
<canvas id="glcanvas"></canvas>
    <div class="wrapper">
      <% if bigbluebutton_endpoint_default? %>
        <div class="alert alert-icon alert-danger text-center mb-0">
          <div class="flash alert d-inline">
            <i class="fas fa-exclamation-triangle"></i>
            <p class="d-inline"><%= t("test_install",
              href: link_to(t("docs").downcase, "http://docs.bigbluebutton.org/install/greenlight-v2.html#2-install-greenlight", target: "_blank", rel: "noopener")
            ).html_safe %>
          </div>
        </div>
      <% end %>

      <% unless Rails.configuration.banner_message.blank? %>
        <div class="alert alert-icon alert-danger text-center mb-0">
          <div class="flash alert d-inline">
            <p class="d-inline"><%= Rails.configuration.banner_message %></p>
          </div>
        </div>
      <% end %>

      <%= render 'shared/flash_messages' unless flash.empty? %>

      <%= yield %>
    </div>

    <%= render "shared/footer" %>
  </body>
</html>
